export const defaultProps = {
  body: '<h2 id="h0a55354ba7">Goのフレームワーク【Echo】とは</h2><p>EchoとはGo言語の数あるフレームワークの中でも軽量なフレームワークになります。<br>高機能かつ拡張性も高くとても人気の高いフレームワークとなります。<br>公式</p><ul><li>Echo：(<a href="https://echo.labstack.com/" target="_blank" rel="noopener noreferrer">https://echo.labstack.com/</a>)</li></ul><h2 id="hfc82e55b48">その他のGoフレームワーク</h2><ul><li>Gin：(<a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener noreferrer">https://github.com/gin-gonic/gin</a>)</li><li> Beego：(<a href="https://beego.me/" target="_blank" rel="noopener noreferrer">https://beego.me/</a>)</li><li> Revel：(<a href="https://revel.github.io/" target="_blank" rel="noopener noreferrer">https://revel.github.io/</a>)</li><li> iris：(<a href="https://www.iris-go.com/" target="_blank" rel="noopener noreferrer">https://www.iris-go.com/</a>)</li></ul><h2 id="h916a3faa2f">実際にサーバーを構築</h2><p>今回はサクっとお試しするためにDocker環境を構築してその上でEchoを動かしてみます。<br>下記が目標の構成です。</p><pre><code>┣─　back\n┃　　└─　server.go\n┣─　Dockerfile\n┣─　go.mod\n┣─　go.sum\n└─　docker-compose.yml</code></pre><h3 id="h10669f1409">Dockerの設定</h3><p>まずはdocker-compose.ymlとDockerfileを用意しGoが動かせる環境を作ります。</p><pre><code>version: \'3\'\nservices:\n  server:\n    build: ./back\n    tty: true\n    volumes:\n      - ./back:/go/src/work\nFROM golang\n\nRUN mkdir /go/src/work\n\nWORKDIR /go/src/work\n\nADD . /go/src/work</code></pre><p>Dockerfileが用意できたらDockerを起動します。</p><pre><code>$ docker-compose build\n$ docker-compose up -d</code></pre><p>Dockerの起動が確認できたらGoが動くか確認します。<br>テスト用のファイルを作成します。(後で削除します。)</p><pre><code>package main\n\nimport "fmt"\n\nfunc main() {\n\tfmt.Printf("テスト実行\\n")\n}</code></pre><p>コンテナにアクセス</p><pre><code>$ docker-compose exec server bash</code></pre><p>作成したtest.goを実行し、結果が返って来ればOK！</p><pre><code>$ go run test.go\n# -&gt; テスト実行</code></pre><h3 id="hbeab4a615a">Echoをインストール</h3><p>下記のコマンドを実行しgo.modを作成します。</p><pre><code>$ go mod init echo-test</code></pre><p>goの初期化が完了したらいよいよEchoをインストールしてみます。</p><pre><code>$ go get github.com/labstack/echo/v4</code></pre><p>上記コマンドで正常にインストールが完了するとgo.sumが作成され必要なパッケージが入ってることが確認できます。</p><h3 id="hfa9215e9a4">EchoでHTTPサーバーを作成</h3><p>簡単なレスポンスを返すメインファイルを作成します。</p><pre><code>package main\n\nimport (\n\t"net/http"\n\n\t"github.com/labstack/echo/v4"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET("/", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, "Hello World!")\n\t})\n\te.Logger.Fatal(e.Start(":3000"))\n}</code></pre><p>最後にdocker側のポートを割り当てて、起動時にサーバーも起動するように変更します。</p><pre><code>version: \'3\'\nservices:\n  server:\n    build: ./back\n    tty: true\n    volumes:\n      - ./back:/go/src/work \n    ports:                      # 追加\n      - 3000:3000               # 追加\n    command: go run server.go   # 追加</code></pre><p>一度コンテナから抜けて、Dockerを再起動</p><pre><code>$ exit\n$ docker-compose up</code></pre><p><br>localhost:3000でアクセスしてレスポンスが返って来れば成功！</p><h2 id="h3bcda3e6b0">最後に</h2><p>今回はGo言語のフレームワークEchoをインストールし、簡単なHTTPサーバーを作成しました。<br>超最小限の動作チェックになるので、次回はDBにアクセスしながらCLUDが行える状態を目指そうと思います！<br>最後までご覧いただきありがとうございます！</p>' as const,
}
